# Licensed Materials - Property of IBM
# 5737-E67
# @ Copyright IBM Corporation 2016, 2020 All Rights Reserved
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      release: {{ .Release.Name }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      chart: {{ .Chart.Name }}
      heritage: {{ .Release.Service }}
      k8s-app: {{ .Release.Name }}
      component: {{ .Release.Name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: docker/default
        productID: "{{ .Chart.Name }}_{{ .Chart.Version }}_00000"
        productName: "{{ .Chart.Name }}"
        productVersion: "{{ .Chart.Version }}"
      labels:
        app: {{ .Release.Name }}
        chart: {{ .Chart.Name }}
        heritage: {{ .Release.Service }}
        k8s-app: {{ .Release.Name }}
        component: {{ .Release.Name }}
        release: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/name: {{ .Release.Name }}
        helm.sh/chart: {{ .Chart.Name }}
    spec:
      hostNetwork: {{ .Values.hostNetwork }}
{{- if .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      containers:
        - args:
          - --provider=openshift
          - --upstream=https://127.0.0.1:{{ .Values.httpsPort }}
          - --upstream-ca=/etc/tls/ca/tls.crt
          - --https-address=:{{ .Values.oauth_proxy.httpsPort }}
          - --client-id={{ .Values.oauth_client.id }}
          - --client-secret={{ .Values.oauth_client.secret }}
          - --pass-user-bearer-token=true
          - --pass-access-token=true
          - --scope=user:full
          - --openshift-delegate-urls={"/":{}}
          - --skip-provider-button=true
          - --cookie-secure=true
          - --cookie-expire=12h0m0s
          - --cookie-refresh=8h0m0s
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=AAECAwQFBgcICQoLDA0OFw==
          image: "{{ .Values.oauth_proxy.image.repository }}/{{ .Values.oauth_proxy.image.name }}:{{ .Values.oauth_proxy.image.tag }}{{ .Values.imageTagPostfix }}"
          imagePullPolicy: {{ .Values.oauth_proxy.image.pullPolicy }}
          name: oauth-proxy
          ports:
          - containerPort: {{ .Values.oauth_proxy.httpsPort }}
            name: public
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: tls-secret
          - mountPath: /etc/tls/ca
            name: ca-tls-secret
        - env:
            - name: ENABLE_IMPERSONATION
              value: "{{ .Values.enable_impersonation }}"
            - name: APISERVER_SECURE_PORT
              value: "{{ .Values.apiserver_secure_port }}"
            - name: CLUSTER_DOMAIN
              value: {{ .Values.cluster_domain }}
            - name: HOST_HEADERS_CHECK_ENABLED
              value: "{{ .Values.host_headers_check_enabled }}"
            - name: ALLOWED_HOST_HEADERS
              value: "{{ .Values.allowed_host_headers }}"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: FIPS_ENABLED
          {{- if .Values.fips_enabled }}
              value: "true"
          {{- else }}
              value: "false"
          {{- end }}
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}{{ .Values.imageTagPostfix }}"
          securityContext:
            allowPrivilegeEscalation: true
          ports:
            {{- if .Values.enable_impersonation }}
            - containerPort: {{ .Values.apiserver_secure_port }}
              hostPort: {{ .Values.apiserver_secure_port }}
            {{- end }}
            - containerPort:  {{ .Values.httpPort }}
          {{- if .Values.hostPort }}
              hostPort: {{ .Values.httpPort }}
          {{- end }}
            - containerPort: {{ .Values.httpsPort }}
          {{- if .Values.hostPort }}
              hostPort: {{ .Values.httpsPort }}
          {{- end }}
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/healthz"
              scheme: HTTP
              port: {{ .Values.httpPort }}
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/healthz"
              scheme: HTTP
              port: {{ .Values.httpPort }}
          command:
            {{- if .Values.enable_impersonation }}
            - /run.sh
            {{- end }}
            - /management-ingress
            - --default-ssl-certificate=$(POD_NAMESPACE)/{{ .Release.Name }}-tls-secret
            - --configmap=$(POD_NAMESPACE)/{{ .Release.Name }}
            - --http-port={{ .Values.httpPort }}
            - --https-port={{ .Values.httpsPort }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ .Release.Name }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          {{- if .Values.enable_impersonation }}
          - mountPath: /var/run/secrets/platform-auth
            name: platform-auth-secret
          {{- end }}
          - mountPath: /var/run/secrets/tls
            name: tls-secret
      volumes:
        {{- if .Values.enable_impersonation }}
        - name: platform-auth-secret
          secret:
            defaultMode: 420
            secretName: platform-auth-secret
        {{- end }}
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: {{ .Release.Name }}-tls-secret
        - name: ca-tls-secret
          secret:
            defaultMode: 420
            secretName: {{ .Values.cert.ca }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{- end }}
